[gd_scene load_steps=43 format=3 uid="uid://bepxtddddmlg4"]

[ext_resource type="Texture2D" uid="uid://dos25crvsgib1" path="res://sprite.png" id="1_1bvub"]
[ext_resource type="Texture2D" uid="uid://drl5rd4osik8i" path="res://GAME OVER.png" id="1_itl3j"]
[ext_resource type="Texture2D" uid="uid://cul601x4ac6a5" path="res://Food_100%.png" id="3_6pimv"]
[ext_resource type="Texture2D" uid="uid://6wwa48cueufk" path="res://Food_20%.png" id="4_kob8s"]
[ext_resource type="Texture2D" uid="uid://d4e4ck3x4vsho" path="res://Food_40%.png" id="5_i56ll"]
[ext_resource type="Texture2D" uid="uid://dyy4hfv4ixlrv" path="res://Food_60%.png" id="6_iy8ke"]
[ext_resource type="Texture2D" uid="uid://bw3gp2ob8ft1y" path="res://Food_80%.png" id="7_hk02j"]
[ext_resource type="Texture2D" uid="uid://chn1hesxmptt6" path="res://Food_CRITICAL!.png" id="8_5jjho"]
[ext_resource type="Texture2D" uid="uid://inrpqikdofed" path="res://1_Heart.png" id="9_g0dnn"]
[ext_resource type="Texture2D" uid="uid://ssmmvbh8con1" path="res://2_Hearts.png" id="10_xohd3"]
[ext_resource type="Texture2D" uid="uid://8b1026u6hws4" path="res://3_Hearts.png" id="11_chapm"]
[ext_resource type="Texture2D" uid="uid://d1cwfojrs0tw8" path="res://white_circle.png" id="12_mjkwy"]
[ext_resource type="Texture2D" uid="uid://k8lq8kitd7b3" path="res://Back_Button.png" id="13_11oj3"]
[ext_resource type="Texture2D" uid="uid://8kxiuymnulwk" path="res://Night_Scene_texture.png" id="13_l3b3o"]
[ext_resource type="Texture2D" uid="uid://rfvm7bwulhle" path="res://Fuel_Left_Bar.png" id="13_naa4u"]
[ext_resource type="AudioStream" uid="uid://c6eiqjqe6183m" path="res://Panting_sound_effect.mp3" id="16_ulpre"]
[ext_resource type="AudioStream" uid="uid://cmhymp4dfrfcv" path="res://dying_sound.mp3" id="17_5xq42"]
[ext_resource type="AudioStream" uid="uid://bt0ypjvetu608" path="res://health_decreased_sound_effect.mp3" id="18_mefyr"]
[ext_resource type="Texture2D" uid="uid://s0vbu4hxa2qd" path="res://show_fuel_left_texture.png" id="19_bpsad"]
[ext_resource type="Texture2D" uid="uid://cgr8pxnle8sma" path="res://shield.png" id="20_jdmis"]

[sub_resource type="GDScript" id="GDScript_v763d"]
resource_name = "Player.gd"
script/source = "extends CharacterBody2D # using a 2D environment. 
@onready var speed: float = 240 
@onready var food_bars: int = 5
@onready var direction: Vector2 = Vector2.DOWN # as the starts the game, initially moving down.
@onready var health: int = 3
@onready var fuel: int = 0
@onready var is_gaining_health = false
@onready var is_losing_health = false
@onready var is_losing_hunger = false
@onready var touching_mob = false
@onready var daytime_process = false
@onready var elapsed_time : float = 0.0
@onready var game_over_run = false
@onready var final_score : float
@onready var showing_fuel_bar = 0
@onready var touched_food = false
@onready var food_wait_time : float
@onready var food_timer_num : int
@onready var nights_survived : int
@onready var ran_game_over = false
@onready var play_sound_called = false
const Hearts_3 = preload(\"res://3_Hearts.png\") 
const Hearts_2 = preload(\"res://2_Hearts.png\")
const Hearts_1 = preload(\"res://1_Heart.png\")
const Food_100 = preload(\"res://100%_food_texture.png\") 
const Food_80 = preload(\"res://80%_food_texture.png\") 
const Food_CRITICAL = preload(\"res://Critical_food_texture.png\") 
@onready var display_multiplayer_called = false
@onready var unmute = Global.Unmute
@onready var died_from_starvation = false
@onready var died_from_mobs = false
@onready var died_from_traps = false
@onready var local_position = Vector2(0, 0)
@onready var WASD_and_arrows_control_mode = Global.WASD_and_arrows
@onready var player_immune_to_mob_damage = false # the purpose of this is to ensure that mob clusters are less dangerous, 
# and that the shape of mobs collisionshapes doesn't cause 1 hit to be 2. 
var shield_equipped = false
@onready var angle : int
var path_follow: PathFollow2D
const shield_rotation_speed = 0.6
var shields_picked_up = 0
@onready var single_player = Global.single_player # this avoids accessing Global all the time, making the code more efficient. 
@onready var player_respawning = false # lets cutscene code know if the player is in the process of respawning.
@onready var player_respawning_second : int # this is used if the respawning process is interrupted by the cutscene. 
# then after the cutscene this variable will be used to see where the countdown left off.

# Called when the node enters the scene tree for the first time.
func _ready():
	Signals.game_paused_true.connect(self.game_paused_true)
	Signals.game_paused_false.connect(self.game_paused_false)
	Global.player_position = global_position # this is added, 
	# as it is required to run before process, so that mobs spawning can function properly on the first night.
	$Night_scene_Sprite2D.hide()
	$Respawning_PointLight2D.hide()
	$Respawning_Label.hide()
	$Respawning_Sprite2D.hide()
	path_follow = $Path2D/PathFollow2D
	if single_player:
		$Game_Over_Back_Button/Game_Over_Back_Button_PointLight2D.hide()
		$PointLight2D.hide()
		$Health_Bar_PointLight2D.hide()
		$Food_Bars_PointLight2D.hide()
		$Show_Fuel_Left_PointLight2D.hide()
	else:
		$Night_scene_Sprite2D.hide()
		$Show_Fuel_Left_PointLight2D.hide()
	$AnimatedSprite2D.play(\"move_down\") 
	# this line of code makes the AnimatedSprite2D node play the move_down animation to match the velocity. 
	$Game_over_screen_Sprite2D.hide()
	$Score.hide()
	$Fuel_left_Sprite2D.hide()
	$Fuel_Left_Label.hide()
	$Nights_survived.hide()
	$Path2D/PathFollow2D/Shield_Sprite2D.hide()
	if not single_player: 
		global_position = Vector2(1004, 650)
		$Camera2D.enabled = false
		$Food_bar_AnimatedSprite2D.scale = Vector2(0.6,0.6)
		$Health_bar_AnimatedSprite2D.scale = Vector2(0.12,0.12)
		$Fuel_left_Sprite2D.scale = Vector2(3, 3)
		$Fuel_Left_Label.scale = Vector2(5, 5)
		$Game_Over_Back_Button.scale = Vector2(0.8,0.8) 
		$Food_bar_AnimatedSprite2D.global_position = Vector2(-60,-130)
		$Health_bar_AnimatedSprite2D.global_position = Vector2(-30, -20)
		$Fuel_left_Sprite2D.global_position = Vector2(570, -40)
		$Game_Over_Back_Button.global_position = Vector2(2200, 1270) 
		# The Below section patches an error, where the following were visible in the wrong place for a fraction of a second,
		# after the cutscene ended (in multiplayer) before process moved them where they were supposed to be.
		# By moving them to where they are supposed to be before the cutscene, when they show afterwards, this error is prevented.
	else:
		$Health_Bar_PointLight2D.hide()
		$Food_Bars_PointLight2D.hide()
		$Camera2D.enabled = true

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	fuel = Global.global_fuel # ensures that the fuel is always up to date with the corresponding global fuel variable. 
	# checks if both players have died.
	if Global.multiplayer_game_over == 2: 
		multiplayer_game_over() 
		# runs the multiplayer game over function.
	if not game_over_run: 
		# checks if player 1 has died. this line increases performace, as in multiplayer game over none of this code, 
		# besides the code to check if both players have died, which runs before this regardless of these parameters, 
		# is necessary, so is slowing the game down. 
		# Additionally, running process without these parameters would get the mobs to follow player 1 when they are dead.
		if WASD_and_arrows_control_mode:
			WASD_and_arrows_control(delta)
		else:
			cursor_control()
		animate_time_of_day()
		display_food()
		display_shield(delta)
		show_fuel_left()
		Global.update_player_position(global_position)
		gain_health()
		display_health()
		critical_food()
		decrease_food()
		$AudioListener2D.global_position = global_position
		# By default the audio is heard from player 1, regardless of single or multiplayer, however as mentioned further down, 
		# when player 1 dies, AudioListener2D position then goes to player 2. 
		if not single_player:
			$Food_bar_AnimatedSprite2D.global_position = Vector2(-60,-130)
			$Health_bar_AnimatedSprite2D.global_position = Vector2(-60, -40)
			$Fuel_left_Sprite2D.global_position = Vector2(1140, -80)
			$Game_Over_Back_Button.global_position = Vector2(2200, 1270) 
			display_food_fuel_and_health_multiplayer()
		elif single_player:
			if unmute:
				play_panting_sound()
				$Game_Over_Back_Button.show()
			$Health_Bar_PointLight2D.hide()
		if not Global.game_over:
			elapsed_time += delta
	elif game_over_run and not Global.game_over: 
		# checks if player 1 has died, but player 2 in multiplayer is still alive.
		elapsed_time += delta 
		# then increases score as score increases even if one out of 2 players has died.
		if (Global.day_and_night % 2) == 0:
			# When Player 1 is dead, player 2 is alive, and it is night:
			$AudioListener2D.global_position = Global.player_2_position
			# update the audio listener to be from player 2's position.
		$Game_Over_Back_Button.global_position = Vector2(2200, 1270) 
		display_food_fuel_and_health_multiplayer()
		show_fuel_left()
		# Testing parameters:
		# 	 check if fuel left label works as expected.
		# 	 check if back button point light 2d works as expected, and hides during the day.
		# 	 test successful! 


func handle_input():
	if not Global.game_over:
		var input_direction = Vector2.ZERO
		if single_player:
			if Input.is_action_pressed(\"move_up\") or Input.is_action_pressed(\"move_up_2\"): 
				# if the input action \"move_up\" as set in project settings, and is activated by w or the up key, then:
				input_direction.y -= 1 
				# change the \"y\" direction by -1, setting the direction as moving up. 
			if Input.is_action_pressed(\"move_down\") or Input.is_action_pressed(\"move_down_2\"): 
				# same as the last one, but for input action \"move_down\". 
				input_direction.y += 1 
				# change the \"y\" direction by +1 setting the direction to moving down. 
			if Input.is_action_pressed(\"move_left\") or Input.is_action_pressed(\"move_left_2\"): 
				# Ok I think it's clear by now...
				input_direction.x -= 1 
				# change the \"x\" direction by -1, setting the direction to left. 
			if Input.is_action_pressed(\"move_right\") or Input.is_action_pressed(\"move_right_2\"): 
				# last one! my fingers are getting sore! yep its definitely obvious by now, 
				# I don't need to add this surely...
				input_direction.x += 1 
				# and finally, change the \"x\" direction by +1, making  the direction right! :D
		else:
			if Input.is_action_pressed(\"move_up\"): 
				# if the input action \"move_up\" as set in project settings, 
				# and is activated by w or the up key, then:
				input_direction.y -= 1 
				# change the \"y\" direction by -1, setting the direction as moving up. 
			if Input.is_action_pressed(\"move_down\"): 
				# same as the last one, but for input action \"move_down\". 
				input_direction.y += 1 
				# change the \"y\" direction by +1 setting the direction to moving down. 
			if Input.is_action_pressed(\"move_left\"): 
				# Ok I think it's clear by now...
				input_direction.x -= 1 
				# change the \"x\" direction by -1, setting the direction to left. 
			if Input.is_action_pressed(\"move_right\"): 
				# last one! my fingers are getting sore! yep its definitely obvious by now, 
				# I don't need to add this surely...
				input_direction.x += 1 
				# and finally, change the \"x\" direction by +1, making  the direction right! :D
			
		# But wait! There's more!!!
		if input_direction != Vector2.ZERO: 
			# if no input is detected...
			direction = input_direction.normalized() 
			# ... keep the sprite moving in the same direction! :D


func move_and_animate(delta): 
	# the function that codes the animations. 
	position += direction * speed * delta 
	# the position of the sprite is equal to: The pre-existing position multiplied by the direction, 
	# so it moves the right way, the speed, so it moves the right amount, and delta, \\
	# so that the speed moves in accordance to the time between frames, as opposed to the set speed at the start of the code.     
	position.x = clamp(position.x, 0, 2304) # these are the x co ords of the left and right side of the map.
	position.y = clamp(position.y, 0, 1296) # these are the y co ords of the top and bottom of the map.
	# position.y/x clamp means that the player can't exit the map. 
	if direction.x > 0: 
		# if the x direction variable is larger than 0, 
		# indicating that the character should move along the x axis, towards the right, then:
		if direction.y > 0: # check if y is greater than 0, which, as in many game programming platforms, 
			# (0,0) is the top left of the screen, so that the y-axis is reversed, 
			# means that the character will be moving right. As this is within the right section of the code, 
			# this means the sprite will move down right.
			$AnimatedSprite2D.play(\"move_down_right\") # as said before, down right.
		elif direction.y < 0: # check to see if player is moving left. (already explained twice)
			$AnimatedSprite2D.play(\"move_up_right\") # move it down left. (wow)
		else: # the only other alternative is if only D is being pressed, 
			# so the character is moving only right, so only play the right animation.
			$AnimatedSprite2D.play(\"move_right\") # so yeah move right.
	elif direction.x < 0: # if x is less than 0 however, you should be moving left.
		if direction.y > 0: # as mentioned, given the top left of the screen is (0,0), 
			# then y being greater than 0 means that the character is moving down. 
			# And because this is within the left section, down left.
			$AnimatedSprite2D.play(\"move_down_left\") # huzzah! move down left!
		elif direction.y < 0: # y is less than zero so moving up, and then left bc of the position.
			$AnimatedSprite2D.play(\"move_up_left\") # Huzzah again! move up left!
		else: # the only other alternative is that only left is being pressed, so therefore...
			$AnimatedSprite2D.play(\"move_left\") # move only left.
	else: # and finally! there are just 2 animation directions unaccounted for!!!
		if direction.y > 0: # only moving down... 
			$AnimatedSprite2D.play(\"move_down\") # moving down!!! YAA!!!! :D
		elif direction.y < 0: # and only moving up!!!
			$AnimatedSprite2D.play(\"move_up\") # UP!!!!


func animate_time_of_day():
	if single_player:
		if (Global.day_and_night % 2) == 0: # if it is night:
			$Night_scene_Sprite2D.show() # show the night scene sprite.
		else: # if it is day:
			if daytime_process:
				return
			else:
				daytime_process = true # prevents this section from running multiple times, 
				# as it can only run the first time now. 
				$Night_scene_Sprite2D.hide() # hide the night scene sprite. 
				daytime_process = false # resets daytime_process to false so this code can run the next day.
	else:
		if (Global.day_and_night % 2) == 0:
			$PointLight2D.show()
		else:
			$PointLight2D.hide()


func display_food():
	if food_bars > 5:
		food_bars = 5
	elif food_bars == 5: 
		# the variable can be between 5 and 0, each meaning food is one of 5 levels, 20% apart, respectively.
		$Food_bar_AnimatedSprite2D.play(\"100%\")
	elif food_bars == 4:
		$Food_bar_AnimatedSprite2D.play(\"80%\")
	elif food_bars == 3:
		$Food_bar_AnimatedSprite2D.play(\"60%\")
	elif food_bars == 2:
		$Food_bar_AnimatedSprite2D.play(\"40%\")
	elif food_bars == 1:
		$Food_bar_AnimatedSprite2D.play(\"20%\")
	elif food_bars == 0:
		$Food_bar_AnimatedSprite2D.play(\"CRITICAL!\")
	elif food_bars < 0:
		food_bars = 0
	else:
		return


func critical_food():
	if food_bars == 0:
		# at 0%, player starts losing health.
		if is_losing_health:
			return
		else:
			is_losing_health = true
			$Food_bar_AnimatedSprite2D.play(\"CRITICAL!\") # this one means 0%, player starts losing health.
			# im going to create a timer node and use that to decrease the health, 
			# with it decreasing for every few seconds with critical food. 
			if Global.Normal_mode:
				await get_tree().create_timer(7.0).timeout # waits 7 seconds to decrease health at critical hunger.
			else:
				await get_tree().create_timer(4.0).timeout # in hard mode, health decreases at critical hunger, faster. 
			# now im going to create a health variable which will be local, and decrease once the 7 second timer ends, 
			# so that the health slowly decreases when food is critical.
			if food_bars == 0:
				health -= 1 # decrease health by 1 every 7 seconds.
				if health == 0:
					died_from_starvation = true
					# this checks if the decrease in health because of hunger, killed the player.
					# if it did, it sets died_from_starvation to true, which will be later referenced.
					# pretty much it lets the user know how / why they died. 
					# if this was what killed them, the above sets it to true so this can be done.
				if unmute:
					$Health_Decreased_AudioStreamPlayer.play()
				is_losing_health = false
			else:
				is_losing_health = false


func decrease_food():
	if not touched_food: # There is a timer that starts right after a food is touched, 
		# which then reduces the food_bars, if its already timing, this should be skipped. 
		if is_losing_hunger: # This avoids multiple runs of the code.
			return
		else:
			is_losing_hunger = true
			if Global.Normal_mode:
				# below, because speed of everything has decreased by 40% its only fair to make the food wiat time longer, 
				# because it takes longer to get fuel. therefore, wait time has increased by 40% from 25 to 35.
				food_wait_time = (35*(1-(Global.day_and_night * 0.05))) 
				# ok so pretty much we multiply the Global.day_and_night variable by 0.05, 
				# and subtract this from 1, and multiply the resulting number by the original number of seconds, 25. 
				#
				# so on the first night, this is the equation:
				# 0 * 0.05 = 0, 1 - 0 = 1, 25 * 1 = 25, therefore food_wait_time = 25 seconds. 
				# but on another random time, such as on the 5th day, when day_and_night = 9, 
				# 9 * 0.05 = 0.45, 1 - 0.45 = 0.55, 25 * 0.55 = 13.75, therefore the wait time would be 13.75 seconds. 
				# this section helps the game increase steadily in difficulty, 
				# providing an steadily increasing challenge to help excercise the user's brains!
				# this only occurs on the normal difficulty, however, and in hard mode this happens.
			else:
				food_wait_time = (21*(1-(Global.day_and_night * 0.08))) # increased by 40% as speed of everything has decreased by that much.
				# a far shorter, and more quickly decreasing time to reduce hunger. 
			await get_tree().create_timer(food_wait_time).timeout
			if not touched_food: 
				# This ensures that during the timer, the player hasn't touched a food and started a new timer.
				food_bars -= 1
				is_losing_hunger = false
			else:
				is_losing_hunger = false


func display_health():
	if health == 3:
		$Health_bar_AnimatedSprite2D.play(\"3_Hearts\")
	elif health == 2:
		$Health_bar_AnimatedSprite2D.play(\"2_Hearts\")
	elif health == 1:
		$Health_bar_AnimatedSprite2D.play(\"1_Heart\")
	elif health > 3:
		health = 3
		$Health_bar_AnimatedSprite2D.play(\"3_Hearts\")
	else:
		if game_over_run:
			return
		else:
			game_over_run = true
			if not single_player:
				$Food_Bars_PointLight2D.energy = 0 # not hide, as this will just be changed in process again!
				$Health_Bar_PointLight2D.energy = 0
			if unmute:
				$Dying_AudioStreamPlayer.play()
			if single_player:
				game_over()
			else:
				Global.update_multiplayer_game_over(Global.multiplayer_game_over+1)
				$AnimatedSprite2D.hide()
				$PointLight2D.color = Color.TRANSPARENT
				global_position = Vector2(-1, -1)
				Global.update_player_position(global_position)
				$Food_bar_AnimatedSprite2D.hide()
				$Health_bar_AnimatedSprite2D.hide()
				if Global.multiplayer_game_over == 2: # if both plyers have died:
					multiplayer_game_over() # Game is now over
				else: # if not:
					count_down_respawn_process() # begin the process of respawning the player!


func multiplayer_game_over():
	Global.game_over = true
	$AnimatedSprite2D.hide() ; $Food_bar_AnimatedSprite2D.hide() ; $Health_bar_AnimatedSprite2D.hide() ; 
	$PointLight2D.color = Color.TRANSPARENT ; $Fuel_left_Sprite2D.hide() ; $Fuel_Left_Label.hide() ; 
	$CollisionShape2D_Parent_Area2D/CollisionShape2D.set_deferred(\"disabled\", true)
	$Score.show() ; $Nights_survived.show()
	$Game_over_screen_Sprite2D.show()
	$Game_Over_Back_Button.show()
	$Respawning_Label.hide()
	$Respawning_PointLight2D.hide()
	$Respawning_Sprite2D.hide()
	$Game_Over_Back_Button/Game_Over_Back_Button_PointLight2D.hide()
	$Game_over_screen_Sprite2D.scale = Vector2(10,10)
	$Game_Over_Back_Button.scale = Vector2(0.8,0.8) ; $Game_Over_Back_Button.global_position = Vector2(-100,-100)
	$Player_2_Died_from_Label.show() ; $Died_from_Label.show()
	$Score.scale = Vector2(7,7) ; $Score.global_position = Vector2(600, 840)
	$Nights_survived.scale = Vector2(7,7) ; $Nights_survived.global_position = Vector2(480, 1000)
	$Game_over_screen_Sprite2D.global_position = Vector2(1152, 648)
	
	calculate_score_and_nights_survived()
	
	$Score.text = \"PUNKTZAHL: \"+ str(final_score)
	$Nights_survived.text = \"NÄCHTE ÜBERLEBEN: \" + str(nights_survived)
	$Player_2_Died_from_Label.global_position = Vector2(250, 300)
	$Died_from_Label.global_position = Vector2(250, 140)
	if Global.player_2_died_from == 1:
		$Player_2_Died_from_Label.text = \"SPIELER 2 IST AN HUNGER GESTORBEN\"
	elif Global.player_2_died_from == 2:
		$Player_2_Died_from_Label.text = \"SPIELER 2 IST AN MOBS GESTORBEN\"
		$Player_2_Died_from_Label.position.x += 80
	else:
		$Player_2_Died_from_Label.text = \"SPIELER 2 IST AN BOMBEN GESTORBEN\"
	if died_from_mobs:
		$Died_from_Label.text = \"SPIELER 1 IST AN MOBS GESTORBEN\"
		$Died_from_Label.position.x += 80
	if died_from_starvation:
		$Died_from_Label.text = \"SPIELER 1 IST AN HUNGER GESTORBEN\"
	if died_from_traps:
		$Died_from_Label.text = \"SPIELER 1 IST AN BOMBEN GESTORBEN\"


func game_over():
	$Health_bar_AnimatedSprite2D.hide()
	$Game_over_screen_Sprite2D.show()
	$Night_scene_Sprite2D.hide()
	$Food_bar_AnimatedSprite2D.hide()
	$Game_Over_Back_Button.position = Vector2(-230,-130)
	$Fuel_left_Sprite2D.hide()
	$Fuel_Left_Label.hide()
	
	calculate_score_and_nights_survived()
	
	$Score.text = \"PUNKTZAHL: \"+ str(final_score)
	$Score.position = Vector2(-80,30)
	$Score.show()
	
	$Nights_survived.text = \"NÄCHTE ÜBERLEBEN: \" + str(nights_survived)
	$Nights_survived.position = Vector2(-90, 50)
	$Nights_survived.show()
	
	$Died_from_Label.scale = Vector2(1, 1)
	if died_from_mobs:
		$Died_from_Label.text = \"AN MOBS GESTORBEN\"
		$Died_from_Label.position.x += 12
	elif died_from_starvation:
		$Died_from_Label.text = \"AN HUNGER GESTORBEN\"
	elif died_from_traps:
		$Died_from_Label.text = \"AN BOMBEN GESTORBEN\"
		# CHANGE THIS IF MORE TRAPS ARE ADDED THAT AREN'T BOMBS! 
	Global.update_game_over(true)


func gain_health():
	if is_gaining_health:
		return
	is_gaining_health = true
	if Global.Normal_mode:
		await get_tree().create_timer(30+(Global.day_and_night)).timeout 
		# waits 30 seconds, plus 1 more second for he number of days and nights you've survived. 
		# This means that health regens on the first night every 30 seconds, then slower as the game progresses, 
		# increasing difficulty over time.
	else:
		await get_tree().create_timer(45+(Global.day_and_night)).timeout 
		# if the user has selected hard mode, they regenerate health slower.
	if health < 3 and health != 0 and food_bars != 0: 
		# makes sure that food isn't critical, as food cannot regen at critical, 
		# also ensures health doesn't regenerate after death, and health can't be more than 3.
		health += 1
		is_gaining_health = false
	else:
		return


func _on_body_entered(body): 
	if body.is_in_group(\"Mobs\"): 
		if not shield_equipped and not player_immune_to_mob_damage:
			health -= 1
			if unmute:
				$Health_Decreased_AudioStreamPlayer.play()
			if health == 0:
				# if this caused the player to die:
				died_from_mobs = true
			player_immune_to_mob_damage = true
			await get_tree().create_timer(1).timeout
			player_immune_to_mob_damage = false
		else: 
			shield_equipped = false
			$Path2D/PathFollow2D/Shield_Sprite2D.hide()
			player_immune_to_mob_damage = true # player is immune to mob damage for 1 second, protecting against mob clusters.
			await get_tree().create_timer(1).timeout
			player_immune_to_mob_damage = false
	elif body.is_in_group(\"Boss_mobs\"):
		if not shield_equipped:
			health -= 3
			died_from_mobs = true
		else:
			shield_equipped = false
			$Path2D/PathFollow2D/Shield_Sprite2D.hide()
	elif body.is_in_group(\"Sleeper_Mobs\"):
		if not shield_equipped:
			health -= 1
			if unmute:
				$Health_Decreased_AudioStreamPlayer.play()
		else:
			shield_equipped = false
			$Path2D/PathFollow2D/Shield_Sprite2D.hide()
		if health == 0:
			# if this caused the player to die:
			died_from_mobs = true
		if unmute:
			$Health_Decreased_AudioStreamPlayer.play()


func _on_area_entered(area):
	if area.is_in_group(\"Foods\"):
		food_bars += 1
		touched_food = true
		food_timer_num += 1
		var start_of_timer_num = food_timer_num
		if Global.Normal_mode:
			food_wait_time = (35*(1-(Global.day_and_night * 0.05)))
		else:
			food_wait_time = (21*(1-(Global.day_and_night * 0.08))) 
		await get_tree().create_timer(food_wait_time).timeout
		if food_timer_num == start_of_timer_num:
			food_bars -= 1
			touched_food = false
		else:
			return
	elif area.is_in_group(\"Fuels\"):
		Global.update_fuel(fuel+1)
	elif area.is_in_group(\"Bombs\"):
		if not shield_equipped:
			health -= 2
			if health == 0 or health < 0:
				health = 0
				died_from_traps = true
			if unmute:
				$Health_Decreased_AudioStreamPlayer.play()
			speed = 120
			await get_tree().create_timer(2.0).timeout
			speed = 240
		else:
			shield_equipped = false
			$Path2D/PathFollow2D/Shield_Sprite2D.hide()
	elif area.is_in_group(\"Shields\"):
		$Path2D/PathFollow2D/Shield_Sprite2D.show()
		shields_picked_up += 1
		var current_shields = shields_picked_up
		shield_equipped = true
		await get_tree().create_timer(20).timeout
		if current_shields == shields_picked_up:
			# if the user hasn't picked up another shield during this 20 seconds:
			shield_equipped = false
			$Path2D/PathFollow2D/Shield_Sprite2D.hide()


func _on_game_over_back_button_pressed():
	Global.update_game_over(false)
	Global.update_multiplayer_game_over(0)
	Global.update_day_and_night(0)
	get_tree().change_scene_to_file(\"res://Start_scene.tscn\")


func show_fuel_left():
	if single_player:
		$Fuel_Left_Label.global_position = $Fuel_left_Sprite2D.global_position + Vector2(26, -12)
	else:
		$Fuel_Left_Label.global_position = Vector2(1280, -140)
	if not Global.game_over:
		if Input.is_action_just_pressed(\"show_fuel_left\"):
			showing_fuel_bar += 1
		if (Global.day_and_night % 2) == 0 and (showing_fuel_bar % 2) != 0:
			# if it is night and the showing_fuel_bar is odd (meaning that it should show)
			$Fuel_left_Sprite2D.show()
			$Fuel_Left_Label.show()
			if not single_player: 
				$Show_Fuel_Left_PointLight2D.show()
			@warning_ignore(\"integer_division\")
			var fuel_requirement = ((Global.day_and_night+2)/2)
			fuel_requirement = round(fuel_requirement)
			var fuel_left = fuel_requirement - fuel
			$Fuel_Left_Label.text = str(fuel_left)
		else:
			# any other scenario, then: 
			$Fuel_Left_Label.hide()
			$Fuel_left_Sprite2D.hide()
			$Show_Fuel_Left_PointLight2D.hide()


func play_panting_sound():
	if play_sound_called:
		return
	else:
		play_sound_called = true
		if (Global.day_and_night % 2) == 0:
			$Panting_AudioStreamPlayer.volume_db = -20
		else:
			$Panting_AudioStreamPlayer.volume_db = -40
		$Panting_AudioStreamPlayer.play()
		await $Panting_AudioStreamPlayer.finished
		play_sound_called = false


func calculate_score_and_nights_survived():
	if Global.day_and_night != 0:
		if (Global.day_and_night % 2) == 0:
			@warning_ignore(\"integer_division\")
			nights_survived = (Global.day_and_night/2)
			# ignore this, because the outcome will and can not be a float value. 
		else:
			@warning_ignore(\"integer_division\")
			# ignore this, because the outcome will and can not be a float value. 
			nights_survived = ((Global.day_and_night+1)/2)
	else:
		nights_survived = 0
	
	# now to calculate score:
	
	final_score = elapsed_time * 2 # this line of code helps prevent really low scores at the start of the game. 
	final_score = (final_score*final_score) # then this line makes the scores huge,
	final_score /= elapsed_time * pow(0.3,nights_survived)# and this line decreases the value, so its readable, 
	# but decreases it exponentially less, so the final score increases exponentially as the game goes on. 
	if nights_survived != 0:
		final_score *= (nights_survived+1) # This section increases the final score majorly, 
		# for the number of nights survived. without this, 
		# someone who ran around in circles the whole time and stayed in the first night, dying of hunger, 
		# could get the same score as someone who played 3 nights and died from mobs. 
		# also +1 because otherwise surviving 1 night multiplies by 1 which does nothing.
	if not Global.Normal_mode:
		final_score *= (1.5 + (nights_survived/10))
		# if the user is on hard mode, increase the score by 50%, + an additional 10% for every ngiht survived.
	final_score = round(final_score) # and this part rounds to a integer. 
	# this entire part of code determining the score helps the score increase exponentially, 
	# which corresponds to the game's difficulty increasing exponentially, 
	# meaning a higher score for a harder part of the game played.
	# this means the score is a better reflection of the player's skill, than just the time they survived.


func display_food_fuel_and_health_multiplayer():
	$Health_Bar_PointLight2D.global_position = Vector2(-60, -40)
	$Food_Bars_PointLight2D.global_position = Vector2(-60, -130)
	$Show_Fuel_Left_PointLight2D.global_position = Vector2(1140, -80)
	if display_multiplayer_called:
		return
	else:
		display_multiplayer_called = true
		if (Global.day_and_night % 2) != 0 and display_multiplayer_called: 
			# if it is day: (when the pointlights shouldn't appear) and this hasn't already run:
			# (it has already run when display_multiplayer_called is false, so this only runs when it isnt yet false,
			# preventing more than 1 run of this code!)
			
			# the following section has been moved here from process, as in process it constantly runs, unnecessarily. 
			# here is only runs the once, and only needs to! tbis helps to optimise the code.
			$Health_Bar_PointLight2D.hide()
			$Food_Bars_PointLight2D.hide()
			$Game_Over_Back_Button/Game_Over_Back_Button_PointLight2D.hide()
			display_multiplayer_called = false 
			# but once back into night, this means that the code can continue to be used as normal. 
		else:
			$Health_Bar_PointLight2D.show()
			$Food_Bars_PointLight2D.show()
			$Game_Over_Back_Button/Game_Over_Back_Button_PointLight2D.show()
			if health == 3:
				$Health_Bar_PointLight2D.texture = Hearts_3
			elif health == 2:
				$Health_Bar_PointLight2D.texture = Hearts_2
			elif health == 1:
				$Health_Bar_PointLight2D.texture = Hearts_1
			if food_bars == 5:
				$Food_Bars_PointLight2D.texture = Food_100
			elif food_bars == 4 or food_bars == 3 or food_bars == 2 or food_bars == 1:
				$Food_Bars_PointLight2D.texture = Food_80
				# this is because these all have the same dimensions, as they have the same amount of characters.
				# this means you don't need a change between them, as 1 size fits 80-20.
			elif food_bars == 0:
				$Food_Bars_PointLight2D.texture = Food_CRITICAL
			display_multiplayer_called = false


func game_paused_true():
	if not game_over_run:
		$Night_scene_Sprite2D.hide()
		$Food_bar_AnimatedSprite2D.hide()
		$Food_Bars_PointLight2D.hide()
		$Health_bar_AnimatedSprite2D.hide()
		$Health_Bar_PointLight2D.hide()
		$Fuel_left_Sprite2D.hide()
		$Fuel_Left_Label.hide()
		$Show_Fuel_Left_PointLight2D.hide()
		$PointLight2D.show()
		$Game_Over_Back_Button.hide()
		$Path2D/PathFollow2D/Shield_Sprite2D.hide()
		$AnimatedSprite2D.scale = Vector2(3, 3)
		$AnimatedSprite2D.position = Vector2(0, -40) #RYUEDBUWNOKHUGVFWIHUO CRITICAL!!!
		$Camera2D.zoom = Vector2(0.79, 0.79)
		$Camera2D.global_position = Vector2(1152, 648) # Centre of the map
	# the following is lower indented beause when this should run, game_over_run will be true so won't run without a lower indent.
	if player_respawning: # if the player is in the process of respawning 
		# (a 3 second process, highly unlikley to ever happen, however there is a lot of code to sort out the issues if it ever did!)
		$Respawning_Label.hide()
		$Respawning_Sprite2D.hide()
		$Respawning_PointLight2D.hide()
		if $Respawning_Label.text == \"Respawnen in 3...\": 
			player_respawning_second = 3
		elif $Respawning_Label.text == \"Respawnen in 2...\": 
			player_respawning_second = 2
		else: 
			player_respawning_second = 1


func game_paused_false():
	if not game_over_run:
		if single_player:
			$Night_scene_Sprite2D.show()
			$PointLight2D.hide()
			$Camera2D.zoom = Vector2(5, 5)
			$Camera2D.position = Vector2(0, 0) 
		else:
			$Food_Bars_PointLight2D.show()
			$Health_Bar_PointLight2D.show()
			display_food_fuel_and_health_multiplayer()
		$AnimatedSprite2D.scale = Vector2(0.5, 0.5)
		$AnimatedSprite2D.position = Vector2(0, 0)
		$Food_bar_AnimatedSprite2D.show()
		$Health_bar_AnimatedSprite2D.show()
		$Game_Over_Back_Button.show()
		if shield_equipped: # show the shield again IF it is equipped.
			$Path2D/PathFollow2D/Shield_Sprite2D.show() 
	# the following is lower indented beause when this should run, while game_over_run is not going to be true, 
	# as both timers are the exact same 3 seconds, but not only does moving this down 1 indentation not affect the functionality, 
	# but it also handles the INSANELY unlikely case that the timers align by the millisecond meaning it is possible that gameoverrun wil be false. 
	# finally, it allows for debugging this. 
	if player_respawning_second != 0: # this will only happen if the player is in the process of respawning in the cutscene.
		# not using the player_respawning because that is changed back to false during the cutscene, should this be run then, meaning it can't be used.
		# this entire block of code is very unlikely to be used much, however it prevents some major issues if respawning happened during the cutscene.
		$Respawning_PointLight2D.show() # show the pointlight, so the label can be seen after the cutscene.
		$Respawning_Label.show()
		$Respawning_Sprite2D.show()
		Global.update_multiplayer_game_over(1) # this will have changed during the cutscene, bring it back so they don't respawn.
		game_over_run = true # this too.
		if player_respawning_second == 1:
			$Respawning_Label.text = \"Respawnen in 1...\"
			await get_tree().create_timer(1).timeout
		elif player_respawning_second == 2:
			$Respawning_Label.text = \"Respawnen in 2...\"
			await get_tree().create_timer(1).timeout
			$Respawning_Label.text = \"Respawnen in 1...\"
			await get_tree().create_timer(1).timeout
		else: # the only other case is == 3:
			$Respawning_Label.text = \"Respawnen in 3...\"
			await get_tree().create_timer(1).timeout
			$Respawning_Label.text = \"Respawnen in 2...\"
			await get_tree().create_timer(1).timeout
			$Respawning_Label.text = \"Respawnen in 1...\"
			await get_tree().create_timer(1).timeout
		respawn_player() # runs the respawn code to bring the player back in the game.
		player_respawning_second = 0 # this shows the next runs of the game_paused_false that this needn't be run.

func WASD_and_arrows_control(delta):
	handle_input()
	move_and_animate(delta)


func cursor_control(): 
	if not Global.game_over:
		var input_direction = (get_global_mouse_position() - global_position).normalized()
		velocity = input_direction * speed
		move_and_slide()
		
		# Now for the animation section:
		
		global_position.x = clamp(global_position.x, 0, 2304) # these are the x co ords of the left and right side of the map.
		global_position.y = clamp(global_position.y, 0, 1296) # these are the y co ords of the top and bottom of the map.
		var mouse_position = get_local_mouse_position()
		var distance_to_mouse = local_position.distance_to(mouse_position)
		# and now we have sufficient data to use the sine rules of trigenometry to find the angle to the mouse,
		# because in-built functions fail to do so effectively. 
		# asin() means inverse sin or sin^-1
		angle = rad_to_deg(asin((mouse_position.y*sin(90))/distance_to_mouse))
		if angle < 15 and angle > -15 and mouse_position.x > 0: 
			$AnimatedSprite2D.play(\"move_right\") 
		elif angle < 15 and angle > -15 and mouse_position.x < 0: 
			$AnimatedSprite2D.play(\"move_left\") 
		elif angle < 15 and angle > -55 and mouse_position.x < 0: 
			$AnimatedSprite2D.play(\"move_up_left\") 
		elif angle > 15 and angle < 55 and mouse_position.x < 0: 
			$AnimatedSprite2D.play(\"move_down_left\") 
		elif angle < 15 and angle > -55 and mouse_position.x > 0: 
			$AnimatedSprite2D.play(\"move_up_right\") 
		elif angle > 15 and angle < 55 and mouse_position.x > 0: 
			$AnimatedSprite2D.play(\"move_down_right\") 
		elif angle < -55 and angle < -15: 
			$AnimatedSprite2D.play(\"move_up\") 
		elif angle > 45:
			$AnimatedSprite2D.play(\"move_down\") 
		else:
			return


func display_shield(delta):
	if shield_equipped:
		# progress the shield around the player:
		path_follow.progress += shield_rotation_speed * path_follow.get_parent().curve.get_baked_length() * delta
		# reset the rotation when the loop is done:
		if path_follow.progress >= path_follow.get_parent().curve.get_baked_length():
				path_follow.progress = 0
		
		# Ensure the shield doesn't spin, when rotating:
		$Path2D/PathFollow2D/Shield_Sprite2D.global_rotation = 0

func count_down_respawn_process(): # this function allows the player to respawn, 
	# making the game more fun, as otherwise, one you die, its just boring!
	await get_tree().create_timer(57).timeout # the player remains dead for 60 seconds (otherwise there's no incentive to stay alive).
	# it is only 57 here because the last 3 are in the below countdown.
	global_position = Vector2(1152, 648) # set the position to the centre of the map!
	player_respawning = true # the respawn process is starting!
	$Fuel_left_Sprite2D.global_position = Vector2(1140, -80) # this is required as the position wasn't updated 
	if Global.multiplayer_game_over != 2: # if both players haven't died:
		$Respawning_Label.global_position = Vector2(810, 580) # change the position before showing so it shows in the correct place.
		$Respawning_PointLight2D.global_position = Vector2(1152, 648)
		$Respawning_Sprite2D.global_position = Vector2(1152, 648)
		if not get_tree().paused: # if the cutscene isn't currently happening:
			if (Global.day_and_night % 2) == 0: # if it is night:
				$Respawning_PointLight2D.show() # show the pointlight so this is visible.
			$Respawning_Label.show() # The others are shown only during the day
			$Respawning_Sprite2D.show()
			$Respawning_Label.text = \"Respawnen in 3...\"
			await get_tree().create_timer(1.0).timeout
			$Respawning_Label.text = \"Respawnen in 2...\"
			await get_tree().create_timer(1.0).timeout
			$Respawning_Label.text = \"Respawnen in 1...\"
			await get_tree().create_timer(1.0).timeout
			if not get_tree().paused: # confirm the cutscene hasn't started during the countdown.
				respawn_player()

func respawn_player():
	if Global.multiplayer_game_over != 2: # this confirms that the other player is still alive.
		# This is implimented due ot an error, this being, if the other player died during the 3 second countdown, 
		# the game would \"restart\" with the game over screen moving and still visible. 
		# Time for the respawning code:
		Global.update_multiplayer_game_over(0) # resets the multiplayer game over value in global.
		game_over_run = false # sets game over run as false, making a whole load of things run again!
		health = 3 # resets health, and
		food_bars = 5 # also food stats to full! 
		$Respawning_Label.hide()
		$Respawning_PointLight2D.hide()
		$Respawning_Sprite2D.hide()
		if died_from_mobs:
			died_from_mobs = false
		elif died_from_starvation:
			died_from_starvation = false
		else:
			died_from_traps = false # reset what the player has died from, so it shows accurately when the game is truly over.
		if not get_tree().paused: # if this is not running during a cutscene:
			$Food_bar_AnimatedSprite2D.global_position = Vector2(-60,-130)
			$Health_bar_AnimatedSprite2D.global_position = Vector2(-60, -40)
			$Fuel_left_Sprite2D.global_position = Vector2(1140, -80)
			$Game_Over_Back_Button.global_position = Vector2(2200, 1270) 
			$PointLight2D.hide() # fixes bug where, as animate time of day() isnt run when dead, 
			# changing the colour below will show the pointlight at day for a split second!
			$AnimatedSprite2D.show() # show the animatedsprite2D
			$CollisionShape2D_Parent_Area2D/CollisionShape2D.set_deferred(\"disabled\", false) # enable collisions!
			$Food_bar_AnimatedSprite2D.show() # show food and health stats!
			$Health_bar_AnimatedSprite2D.show()
			if (Global.day_and_night % 2) == 0: # if it is night:
				$PointLight2D.show() # show the pointlight!
				$Food_Bars_PointLight2D.show() # show the pointlight 2ds of the previous sprites to make them visible.
				$Health_Bar_PointLight2D.show()
			$Food_Bars_PointLight2D.energy = 1
			$Health_Bar_PointLight2D.energy = 1
			$PointLight2D.color = Color8(255, 255, 255, 65) # change the pointlight color to be the original colour!
			player_respawning = false # this only changes back if the cutscene is inactive. 
			# otherwise, it could prevent the cutscene's code for this code and teh cutscenes overlapping. 
			# plus, this is reset to false in the game_over_false code anyways. (assuming the respawning 3 seconds overlaps with that)
"

[sub_resource type="AtlasTexture" id="AtlasTexture_bm726"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_ntwp5"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_i5sve"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_d5rei"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_o5f68"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_a0cxj"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_2jfwf"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_gjq3s"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_3w7ch"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_jgv1f"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_cg0uf"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_ow25q"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_bse1t"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_joot5"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_etanf"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_j0hla"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 300, 100, 100)

[sub_resource type="SpriteFrames" id="SpriteFrames_c30tb"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bm726")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ntwp5")
}],
"loop": true,
"name": &"move_down",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_i5sve")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d5rei")
}],
"loop": true,
"name": &"move_down_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_o5f68")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a0cxj")
}],
"loop": true,
"name": &"move_down_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_2jfwf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gjq3s")
}],
"loop": true,
"name": &"move_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3w7ch")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jgv1f")
}],
"loop": true,
"name": &"move_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_cg0uf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ow25q")
}],
"loop": true,
"name": &"move_up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bse1t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_joot5")
}],
"loop": true,
"name": &"move_up_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_etanf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j0hla")
}],
"loop": true,
"name": &"move_up_right",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_lgbhs"]
radius = 12.0
height = 24.0

[sub_resource type="SpriteFrames" id="SpriteFrames_egunb"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_6pimv")
}],
"loop": true,
"name": &"100%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_kob8s")
}],
"loop": true,
"name": &"20%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("5_i56ll")
}],
"loop": true,
"name": &"40%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("6_iy8ke")
}],
"loop": true,
"name": &"60%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("7_hk02j")
}],
"loop": true,
"name": &"80%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("8_5jjho")
}],
"loop": true,
"name": &"CRITICAL!",
"speed": 5.0
}]

[sub_resource type="SpriteFrames" id="SpriteFrames_s6qwr"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("9_g0dnn")
}],
"loop": true,
"name": &"1_Heart",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("10_xohd3")
}],
"loop": true,
"name": &"2_Hearts",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("11_chapm")
}],
"loop": true,
"name": &"3_Hearts",
"speed": 5.0
}]

[sub_resource type="Curve2D" id="Curve2D_rtpi6"]
_data = {
"points": PackedVector2Array(0, 0, 0, 0, 56.25, 20, 0, 0, 0, 0, 52.0834, 34, 0, 0, 0, 0, 45.8334, 46, 0, 0, 0, 0, 35.4166, 56, 0, 0, 0, 0, 25, 60, 0, 0, 0, 0, 14.5834, 62, 0, 0, 0, 0, 8.33337, 62, 0, 0, 0, 0, -6.25, 62, 0, 0, 0, 0, -22.9166, 58, 0, 0, 0, 0, -33.3334, 50, 0, 0, 0, 0, -39.5834, 42, 0, 0, 0, 0, -45.8334, 32, 0, 0, 0, 0, -50, 22, 0, 0, 0, 0, -50, 10, 0, 0, 0, 0, -47.9166, -2, 0, 0, 0, 0, -41.6666, -14, 0, 0, 0, 0, -35.4166, -22, 0, 0, 0, 0, -25, -30, 0, 0, 0, 0, -10.4166, -36, 0, 0, 0, 0, 4.16663, -36, 0, 0, 0, 0, 20.8334, -34, 0, 0, 0, 0, 31.25, -30, 0, 0, 0, 0, 41.6666, -24, 0, 0, 0, 0, 50, -14, 0, 0, 0, 0, 54.1666, -4, 0, 0, 0, 0, 56.25, 4, 0, 0, 0, 0, 58.3334, 14)
}
point_count = 27

[node name="Player" type="CharacterBody2D" groups=["Player"]]
z_index = 1
position = Vector2(582, 325)
scale = Vector2(0.5, 0.5)
script = SubResource("GDScript_v763d")

[node name="Game_over_screen_Sprite2D" type="Sprite2D" parent="."]
z_index = 4
scale = Vector2(1.543, 1.543)
texture = ExtResource("1_itl3j")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 3
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_c30tb")
animation = &"move_up_right"
metadata/_edit_group_ = true

[node name="CollisionShape2D_Parent_Area2D" type="Area2D" parent="." groups=["Player"]]

[node name="CollisionShape2D" type="CollisionShape2D" parent="CollisionShape2D_Parent_Area2D"]
position = Vector2(0, 13)
shape = SubResource("CapsuleShape2D_lgbhs")
metadata/_edit_group_ = true

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(-1, 0)
zoom = Vector2(5, 5)

[node name="Food_bar_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 5
position = Vector2(-158, -113)
scale = Vector2(0.2, 0.2)
sprite_frames = SubResource("SpriteFrames_egunb")
animation = &"100%"
speed_scale = 2.08165e-12

[node name="Health_bar_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 5
position = Vector2(-158, -85)
scale = Vector2(0.04, 0.04)
sprite_frames = SubResource("SpriteFrames_s6qwr")
animation = &"3_Hearts"
speed_scale = 2.08165e-12

[node name="Score" type="Label" parent="."]
z_index = 5
anchors_preset = -1
anchor_right = 0.586
anchor_bottom = 0.565
offset_left = -180.0
offset_top = 30.0
offset_right = 184.0
offset_bottom = 53.0

[node name="Nights_survived" type="Label" parent="."]
z_index = 5
anchors_preset = -1
anchor_right = 0.586
anchor_bottom = 0.565
offset_left = -180.0
offset_top = 30.0
offset_right = 184.0
offset_bottom = 53.0

[node name="PointLight2D" type="PointLight2D" parent="."]
z_index = 12
scale = Vector2(0.12, 0.12)
color = Color(1, 1, 1, 0.254902)
energy = 4.0
texture = ExtResource("12_mjkwy")

[node name="Night_scene_Sprite2D" type="Sprite2D" parent="."]
z_index = 4
scale = Vector2(0.13, 0.13)
texture = ExtResource("13_l3b3o")

[node name="Game_Over_Back_Button" type="Button" parent="."]
z_index = 5
z_as_relative = false
offset_left = 136.1
offset_top = 92.0
offset_right = 644.1
offset_bottom = 380.0
scale = Vector2(0.15, 0.15)
icon = ExtResource("13_11oj3")
flat = true

[node name="Game_Over_Back_Button_PointLight2D" type="PointLight2D" parent="Game_Over_Back_Button"]
z_index = 1
position = Vector2(254, 145)
energy = 2.0
texture = ExtResource("13_11oj3")

[node name="Fuel_left_Sprite2D" type="Sprite2D" parent="."]
z_index = 5
position = Vector2(156, -110)
scale = Vector2(0.5, 0.5)
texture = ExtResource("13_naa4u")

[node name="Panting_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("16_ulpre")
volume_db = -20.0

[node name="Dying_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("17_5xq42")
volume_db = -40.0

[node name="Health_Decreased_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("18_mefyr")
volume_db = -20.0

[node name="Health_Bar_PointLight2D" type="PointLight2D" parent="."]
scale = Vector2(0.12, 0.12)
texture = ExtResource("11_chapm")

[node name="Food_Bars_PointLight2D" type="PointLight2D" parent="."]
scale = Vector2(0.6, 0.6)
texture = ExtResource("3_6pimv")

[node name="Show_Fuel_Left_PointLight2D" type="PointLight2D" parent="."]
scale = Vector2(1.07, 1.07)
texture = ExtResource("19_bpsad")

[node name="Fuel_Left_Label" type="Label" parent="."]
z_index = 12
offset_left = 184.0
offset_top = -116.5
offset_right = 224.0
offset_bottom = -93.5
theme_override_colors/font_color = Color(0, 0, 0, 1)

[node name="Died_from_Label" type="Label" parent="."]
z_index = 5
offset_left = -100.0
offset_top = -60.0
offset_right = -60.0
offset_bottom = -37.0
scale = Vector2(6, 6)

[node name="Player_2_Died_from_Label" type="Label" parent="."]
z_index = 5
offset_right = 40.0
offset_bottom = 23.0
scale = Vector2(6, 6)

[node name="AudioListener2D" type="AudioListener2D" parent="."]

[node name="Path2D" type="Path2D" parent="."]
position = Vector2(-2, -4)
scale = Vector2(0.96, 1)
curve = SubResource("Curve2D_rtpi6")

[node name="PathFollow2D" type="PathFollow2D" parent="Path2D"]
position = Vector2(56.25, 20)
rotation = 1.86006

[node name="Shield_Sprite2D" type="Sprite2D" parent="Path2D/PathFollow2D"]
z_index = 4
position = Vector2(0, 9.5)
scale = Vector2(0.07, 0.07)
texture = ExtResource("20_jdmis")

[node name="Respawning_PointLight2D" type="PointLight2D" parent="."]
texture = ExtResource("19_bpsad")

[node name="Respawning_Sprite2D" type="Sprite2D" parent="."]
z_index = 4
texture = ExtResource("19_bpsad")

[node name="Respawning_Label" type="Label" parent="."]
z_index = 5
offset_right = 40.0
offset_bottom = 23.0
scale = Vector2(5, 5)
theme_override_colors/font_color = Color(0, 0, 0, 1)

[connection signal="area_entered" from="CollisionShape2D_Parent_Area2D" to="." method="_on_area_entered"]
[connection signal="body_entered" from="CollisionShape2D_Parent_Area2D" to="." method="_on_body_entered"]
[connection signal="pressed" from="Game_Over_Back_Button" to="." method="_on_game_over_back_button_pressed"]
